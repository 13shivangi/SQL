USE Eshop

--This is a comment
--Get all products 
Select * from Product

--Get all products that have categoryid = 10
select * from Product where CategoryId=10

--Get total cost of products listed with categoryid =10
select Sum(Cost) from Product where CategoryId=10

--Get product name , cost 
select Name,Cost from Product

--Save above result as view
CREATE VIEW vw_Product as (select Name, Cost from Product)

--See the view result
select * from vw_Product

--Get all products that start with K
select * from Product where Name Like 'K%'

--Get all products where u is a second letter
select * from Product Where Name Like '_u%'

--Get all products whose product cost is not equal to 5000
select * from Product where cost <> 1000

--Get all products where name starts with T and ends with S
select * from Product where Name Like 'T%s'

--select all products with names as 'T-shirt', 'ipad','kurti'
select * from Product where Name='T-Shirts' OR Name='Ipad' OR Name='Kurti'

--better technique
select * from Product where Name in('T-Shirts','Ipad','Kurti')

--Get all products having a category id matching a category in ProductCategory table
select * from Product where CategoryId IN(select Id from ProductCategory)

--Get name and orderid for all customer
select [Name],[OrderId] from Customer, Orders where Customer.Id=Orders.CustomerId

--Get total revenue generated by shivangi
select Sum(Cost) from Orders,Customer,Product where Orders.CustomerId=Customer.Id AND Orders.ProductId=Product.Id AND Customer.Name='Shivangi' 

--Get top two most expensive orders in descending order 
select top 2* from Orders,Product where Orders.ProductId=Product.Id Order by product.Cost desc

--Get all order details Count grouped by status
select count(*),[Status] from Orders group by[Status]

--Group all products by category with category name , category id and count , also check the category name should hve 'i' and count less than 4 and then order it in descending order and creating a view of this query
Create view vw_GroupByCategory AS
(select count(*) as [TotalProducts],[CategoryId],ProductCategory.[Name] from Product, ProductCategory 
where ProductCategory.Id=Product.CategoryId 
group by[CategoryId],ProductCategory.[Name]
having ProductCategory.Name LIKE '%i%' AND count(*) <4 )
 
--Changing the view query 
SELECT [TotalProducts]
      ,[Name]
  FROM [EShop].[dbo].[vw_GroupByCategory]
  where [Name]='Lights'

--Group all products by category with category name , category id and count , also check the category name should hve 'i' and count less than 4 and then order it in descending order
 select count(*) as [TotalProducts],[CategoryId],ProductCategory.[Name] from Product, ProductCategory 
where ProductCategory.Id=Product.CategoryId 
group by[CategoryId],ProductCategory.[Name]
having ProductCategory.Name LIKE '%i%' AND count(*) <4 
Order by count(*), ProductCategory.[Name] desc


--creating a stored procedure
CREATE Procedure sp_GropuByCategory AS BEGIN
select count(*) as [TotalProducts],[CategoryId],ProductCategory.[Name] from Product, ProductCategory 
where ProductCategory.Id=Product.CategoryId 
group by[CategoryId],ProductCategory.[Name]
having ProductCategory.Name LIKE '%i%' AND count(*) <4 
Order by count(*), ProductCategory.[Name] desc
END

--execute stored procedure
exec [dbo].[sp_GropuByCategory]

--creating a function of a query that gives us the most expensive product
Create Function fn_MaxProduct() 
Returns BIGINT
AS
BEGIN
DECLARE @result BigInt
select @result =  MAX(Cost) from Product
Return @result
END

--creating a function of a query that gives us the least expensive product
Create Function fn_MinProduct1() 
Returns BIGINT
AS
BEGIN
DECLARE @result BigInt
select @result =  MIN(Cost) from Product
Return @result
END

--executing function
select [dbo].[fn_MinProduct1]() as [Least Expensive],
      [dbo].[fn_MaxProduct]()  as [Most Expensive]

--executing functions with normal table columns
select [dbo].[fn_MaxProduct]() as  [Most Expensive],[Name] from Product where [Cost]=[dbo].[fn_MaxProduct]()

--function returning a table
CREATE FUNCTION fn_SampleTable() 
RETURNS TABLE 
AS
RETURN 
(
	-- Add the SELECT statement with parameter references here
	SELECT Product.[Name] as [ProductName], ProductCategory.[Name] as [CategoryName] from Product,ProductCategory where Product.CategoryId=ProductCategory.Id
)
GO

--executing a function that returns a table
select * from [dbo].[fn_SampleTable]()

--working with joins with pre-defined keywords
--inner join
select * from Customer INNER JOIN Orders ON Customer.Id=Orders.CustomerId --customer becomes left table and orders become right table
where Customer.Name LIKE '%a%'

--left outer join - all records of left and only matching records from right
select * from Customer LEFT OUTER JOIN Orders ON Customer.Id= Orders.CustomerId

--right outer join - all records of right and only matching records of left
select * from Customer RIGHT OUTER JOIN Orders ON  Customer.Id= Orders.CustomerId

--Full Outer join - all the records of both tables i.e all records of left + matching records of right and all records of right + matching records of left
select * from Product FULL OUTER JOIN Customer ON Product.Id=Customer.Id

--cross join - all the records of both table
select * from Product CROSS JOIN Customer

--inserting manually to product table to check 'trigger' created
USE [EShop]
GO

INSERT INTO [dbo].[Product]
           ([Name]
           ,[Cost]
           ,[CategoryId])
     VALUES
           ('Dummy',500,12)
		   
INSERT INTO [dbo].[Product]
           ([Name]
           ,[Cost]
           ,[CategoryId])
     VALUES
           ('Summy',300,11)
		   
INSERT INTO [dbo].[Product]
           ([Name]
           ,[Cost]
           ,[CategoryId])
     VALUES
           ('Tummy',400,12)
GO

select * from Audit
select * from Product

--Add customer then automatically add a dummy order
USE [EShop]
Go

Alter Procedure sp_InsertNewCustomer(@Name NVARCHAR(50), @Email NVARCHAR(50))
AS
BEGIN
BEGIN TRANSACTION T1
INSERT INTO [dbo].[Customer]
           ([Name]
           ,[Email])
     VALUES
           (@Name, @Email)

IF @@ERROR <> 0
    ROLLBACK Transaction T1

DECLARE @Cid INT
SET @Cid = @@Identity -- built in variable name and it automatically stores the auto generated primary key

INSERT INTO [dbo].[Orders]
           ([Status]
           ,[OrderDate]
           ,[ProductId]
           ,[CustomerId])
     VALUES
           ('In-Progress',GETDATE(),1009,@Cid)

IF @@ERROR <> 0
    ROLLBACK Transaction  T1

COMMIT TRANSACTION T1
END

exec [dbo].[sp_InsertNewCustomer] 'Parth','parth12345@yahoo.com'
select top 1* from Customer order by id desc
select top 1* from Orders order by OrderId desc

--updating a query
UPDATE [dbo].[Product]
   SET [Name] = 'Jhoomer'
      ,[Cost] = 23000
      ,[CategoryId] = 11
 WHERE [Name] = 'Summy'
 select * from Product

 --deleting a query from a table where it has dependency
DELETE Orders where CustomerId IN (select Id from Customer where Customer.Id=6)

DELETE Customer where [Name] = 'Parth' -- deleting a query normally 
select * from Customer








